require("keydefs");
autoload("lua_mode", "lua");

LINENUMBERS = 2;
No_Backups = 1;
LINENUMBERS = 2;
WRAP_INDENTS = 1;
USE_TABS = 0;
TAB_DEFAULT = 4;
C_INDENT = 4;
C_BRA_NEWLINE = 0;
C_CONTINUED_OFFSET = 4;
C_BRACE = 0;
C_Colon_Offset = 0;
No_Backups = 1;         % If non-zero, backup files will not be created.
BLINK           = 1;    % if non zero, blink matching parenthesis
WRAP            = 78;   % wrap column
ADD_NEWLINE     = 1;    % add newline to file when writing if one not present
CASE_SEARCH     = 1;    % zero turns off case sensitivity for
                    % search functions, non-zero turns it on
set_color_scheme ("black3");

if (BATCH == 0) {
    () = evalfile("emacs");
    enable_menu_keys ();
    setkey("toggle_line_number_mode", Key_F8);
    setkey("toggle_overwrite",   Key_Ins);       % insert
    setkey("delete_char_cmd",    Key_Del);       % delete
    setkey("compile", Key_F7);
    setkey("bol", Key_Home);       % home
    setkey("eol", Key_End);        % end
    setkey("ide_skip_word",      Key_Shift_Right);
    setkey("ide_bskip_word",     Key_Shift_Left);
    setkey("backward_paragraph", Key_Shift_Up);
    setkey("forward_paragraph",  Key_Shift_Down);
    setkey("bob", "\x1b\x5b\x35\x3b\x35\x7e");       % Ctrl-Pgup
    setkey("eob", "\x1b\x5b\x36\x3b\x35\x7e");       % Ctrl-Pgdn
}

define load_local_config()
{
    variable dir = getcwd();
    variable uid = getuid;
    variable jsl,st;
    while (dir != "/" and strlen(dir) > 1) {
        st = stat_file(dir);
        if (st == NULL) return;
        if (st.st_uid != uid) return;
        jsl = dir + "/.jed.sl";
        st = stat_file(jsl);
        if (st != NULL) {
            if (st.st_uid == uid) {
                pop(evalfile(jsl));
                return;
            }
        }
        dir = path_dirname(dir);
    }
}

define startup_hook()
{
    () = evalfile("linux");
    load_local_config(); % .jed.sl
}

define text_mode_hook()
{
    % insert tab characters in text mode, do not indent
    local_setkey ("self_insert_cmd", "\t");
    % 8-column tabs are kind of a standard
    TAB = 8;
}

custom_variable ("Ide_Skippable_Chars",
                 "\n\t !\"#$%&'()*+,-./:;<=>?@[\]^`{|}~");

define ide_bskip_word ()                % Alt+Left
{
    bskip_chars (Ide_Skippable_Chars);
    bskip_chars ("^" + Ide_Skippable_Chars);
}

define ide_skip_word ()                 % Alt+Right
{
    variable p = _get_point ();
    skip_chars ("^" + Ide_Skippable_Chars);
    if (_get_point () == p) {
        skip_chars (Ide_Skippable_Chars);
        skip_chars ("^" + Ide_Skippable_Chars);
    }
}

define global_mode_hook (mode)
{
    set_line_number_mode(1);
}

%
% Switch to previous or next buffer.
%   This code taken from ide_next_buffer() in ide.sl.
%
define next_buffer (previous)
{
    variable n, buf;
    n = buffer_list (); % get the buffers on the stack
    if (previous)
    {
        _stk_reverse (n-1);
    }
    loop (n) {
        buf = ();
        n--;
        % Skip *scratch* and other buffers that are not of interest.
        if ((buf[0] == '*') or (buf[0] == ' '))
        {
            continue;
        }
        sw2buf (buf);
        _pop_n (n);
        return;
    }
}

% Bind Alt-. and Alt-, (Meta-period and Meta-comma) to next_buffer().
setkey ("next_buffer (0)", "\e,");
setkey ("next_buffer (1)", "\e.");

